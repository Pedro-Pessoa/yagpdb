// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package discordgo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo(in *jlexer.Lexer, out *PresenceUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in, out.User)
			}
		case "status":
			out.Status = Status(in.String())
		case "activities":
			if in.IsNull() {
				in.Skip()
				out.Activities = nil
			} else {
				in.Delim('[')
				if out.Activities == nil {
					if !in.IsDelim(']') {
						out.Activities = make([]*Activity, 0, 8)
					} else {
						out.Activities = []*Activity{}
					}
				} else {
					out.Activities = (out.Activities)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Activity
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Activity)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo2(in, v1)
					}
					out.Activities = append(out.Activities, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "since":
			if in.IsNull() {
				in.Skip()
				out.Since = nil
			} else {
				if out.Since == nil {
					out.Since = new(int)
				}
				*out.Since = int(in.Int())
			}
		case "client_status":
			easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo3(in, &out.ClientStatus)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo(out *jwriter.Writer, in PresenceUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"activities\":"
		out.RawString(prefix)
		if in.Activities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Activities {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo2(out, *v3)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"since\":"
		out.RawString(prefix)
		if in.Since == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Since))
		}
	}
	{
		const prefix string = ",\"client_status\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo3(out, in.ClientStatus)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PresenceUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PresenceUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PresenceUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PresenceUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo(l, v)
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo3(in *jlexer.Lexer, out *ClientStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "desktop":
			out.Desktop = string(in.String())
		case "mobile":
			out.Mobile = string(in.String())
		case "web":
			out.Web = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo3(out *jwriter.Writer, in ClientStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Desktop != "" {
		const prefix string = ",\"desktop\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Desktop))
	}
	if in.Mobile != "" {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Mobile))
	}
	if in.Web != "" {
		const prefix string = ",\"web\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Web))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo2(in *jlexer.Lexer, out *Activity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = ActivityType(in.Int())
		case "url":
			out.URL = string(in.String())
		case "created_at":
			out.CreatedAt = int(in.Int())
		case "timestamps":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamps).UnmarshalJSON(data))
			}
		case "application_id":
			out.ApplicationID = int64(in.Int64Str())
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				if out.Details == nil {
					out.Details = new(string)
				}
				*out.Details = string(in.String())
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				if out.State == nil {
					out.State = new(string)
				}
				*out.State = string(in.String())
			}
		case "emoji":
			if in.IsNull() {
				in.Skip()
				out.Emoji = nil
			} else {
				if out.Emoji == nil {
					out.Emoji = new(ActivityEmoji)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo4(in, out.Emoji)
			}
		case "party":
			easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo5(in, &out.Party)
		case "assets":
			easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo6(in, &out.Assets)
		case "secrets":
			easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo7(in, &out.Secrets)
		case "instance":
			out.Instance = bool(in.Bool())
		case "flags":
			out.Flags = ActivityFlags(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo2(out *jwriter.Writer, in Activity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedAt))
	}
	if true {
		const prefix string = ",\"timestamps\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo4(out, in.Timestamps)
	}
	if in.ApplicationID != 0 {
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ApplicationID))
	}
	if in.Details != nil {
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		out.String(string(*in.Details))
	}
	if in.State != nil {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(*in.State))
	}
	if in.Emoji != nil {
		const prefix string = ",\"emoji\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo5(out, *in.Emoji)
	}
	if true {
		const prefix string = ",\"party\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo6(out, in.Party)
	}
	if true {
		const prefix string = ",\"assets\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo7(out, in.Assets)
	}
	if true {
		const prefix string = ",\"secrets\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo8(out, in.Secrets)
	}
	if in.Instance {
		const prefix string = ",\"instance\":"
		out.RawString(prefix)
		out.Bool(bool(in.Instance))
	}
	if in.Flags != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo8(in *jlexer.Lexer, out *TimeStamps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "end":
			out.EndTimestamp = int64(in.Int64())
		case "start":
			out.StartTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo4(out *jwriter.Writer, in TimeStamps) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EndTimestamp != 0 {
		const prefix string = ",\"end\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.EndTimestamp))
	}
	if in.StartTimestamp != 0 {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.StartTimestamp))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo7(in *jlexer.Lexer, out *ActivitySecrets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "join":
			out.Join = string(in.String())
		case "spectate":
			out.Spectate = string(in.String())
		case "match":
			out.Match = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo8(out *jwriter.Writer, in ActivitySecrets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Join != "" {
		const prefix string = ",\"join\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Join))
	}
	if in.Spectate != "" {
		const prefix string = ",\"spectate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Spectate))
	}
	if in.Match != "" {
		const prefix string = ",\"match\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Match))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo6(in *jlexer.Lexer, out *ActivityAssets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "large_image":
			out.LargeImage = string(in.String())
		case "large_text":
			out.LargeText = string(in.String())
		case "small_image":
			out.SmallImage = string(in.String())
		case "small_text":
			out.SmallText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo7(out *jwriter.Writer, in ActivityAssets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LargeImage != "" {
		const prefix string = ",\"large_image\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LargeImage))
	}
	if in.LargeText != "" {
		const prefix string = ",\"large_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LargeText))
	}
	if in.SmallImage != "" {
		const prefix string = ",\"small_image\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallImage))
	}
	if in.SmallText != "" {
		const prefix string = ",\"small_text\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SmallText))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo5(in *jlexer.Lexer, out *ActivityParty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "size":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v4 := 0
				for !in.IsDelim(']') {
					if v4 < 2 {
						(out.Size)[v4] = int(in.Int())
						v4++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo6(out *jwriter.Writer, in ActivityParty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if true {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v5 := range in.Size {
			if v5 > 0 {
				out.RawByte(',')
			}
			out.Int(int((in.Size)[v5]))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo4(in *jlexer.Lexer, out *ActivityEmoji) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "id":
			out.ID = int64(in.Int64Str())
		case "animated":
			out.Animated = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo5(out *jwriter.Writer, in ActivityEmoji) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ID))
	}
	if in.Animated {
		const prefix string = ",\"animated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Animated))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "email":
			out.Email = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "locale":
			out.Locale = string(in.String())
		case "discriminator":
			out.Discriminator = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "verified":
			out.Verified = bool(in.Bool())
		case "mfa_enabled":
			out.MFAEnabled = bool(in.Bool())
		case "bot":
			out.Bot = bool(in.Bool())
		case "public_flags":
			out.PublicFlags = UserFlags(in.Int())
		case "premium_type":
			out.PremiumType = int(in.Int())
		case "system":
			out.System = bool(in.Bool())
		case "flags":
			out.Flags = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"discriminator\":"
		out.RawString(prefix)
		out.String(string(in.Discriminator))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	{
		const prefix string = ",\"mfa_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.MFAEnabled))
	}
	{
		const prefix string = ",\"bot\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bot))
	}
	{
		const prefix string = ",\"public_flags\":"
		out.RawString(prefix)
		out.Int(int(in.PublicFlags))
	}
	{
		const prefix string = ",\"premium_type\":"
		out.RawString(prefix)
		out.Int(int(in.PremiumType))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.Bool(bool(in.System))
	}
	{
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		out.Int(int(in.Flags))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo9(in *jlexer.Lexer, out *GuildCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Guild = new(Guild)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "icon":
			out.Icon = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "afk_channel_id":
			out.AfkChannelID = int64(in.Int64Str())
		case "owner_id":
			out.OwnerID = int64(in.Int64Str())
		case "owner":
			out.Owner = bool(in.Bool())
		case "joined_at":
			out.JoinedAt = Timestamp(in.String())
		case "discovery_splash":
			out.DiscoverySplash = string(in.String())
		case "splash":
			out.Splash = string(in.String())
		case "afk_timeout":
			out.AfkTimeout = int(in.Int())
		case "member_count":
			out.MemberCount = int(in.Int())
		case "verification_level":
			out.VerificationLevel = VerificationLevel(in.Int())
		case "large":
			out.Large = bool(in.Bool())
		case "default_message_notifications":
			out.DefaultMessageNotifications = MessageNotifications(in.Int())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]*Role, 0, 8)
					} else {
						out.Roles = []*Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *Role
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(Role)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo10(in, v6)
					}
					out.Roles = append(out.Roles, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				in.Delim('[')
				if out.Emojis == nil {
					if !in.IsDelim(']') {
						out.Emojis = make([]*Emoji, 0, 8)
					} else {
						out.Emojis = []*Emoji{}
					}
				} else {
					out.Emojis = (out.Emojis)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *Emoji
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(Emoji)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo11(in, v7)
					}
					out.Emojis = append(out.Emojis, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]*Member, 0, 8)
					} else {
						out.Members = []*Member{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *Member
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(Member)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo12(in, v8)
					}
					out.Members = append(out.Members, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "presences":
			if in.IsNull() {
				in.Skip()
				out.Presences = nil
			} else {
				in.Delim('[')
				if out.Presences == nil {
					if !in.IsDelim(']') {
						out.Presences = make([]*Presence, 0, 8)
					} else {
						out.Presences = []*Presence{}
					}
				} else {
					out.Presences = (out.Presences)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *Presence
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(Presence)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo13(in, v9)
					}
					out.Presences = append(out.Presences, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_presences":
			out.MaxPresences = int(in.Int())
		case "max_members":
			out.MaxMembers = int(in.Int())
		case "channels":
			if in.IsNull() {
				in.Skip()
				out.Channels = nil
			} else {
				in.Delim('[')
				if out.Channels == nil {
					if !in.IsDelim(']') {
						out.Channels = make([]*Channel, 0, 8)
					} else {
						out.Channels = []*Channel{}
					}
				} else {
					out.Channels = (out.Channels)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Channel
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Channel)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo14(in, v10)
					}
					out.Channels = append(out.Channels, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "voice_states":
			if in.IsNull() {
				in.Skip()
				out.VoiceStates = nil
			} else {
				in.Delim('[')
				if out.VoiceStates == nil {
					if !in.IsDelim(']') {
						out.VoiceStates = make([]*VoiceState, 0, 8)
					} else {
						out.VoiceStates = []*VoiceState{}
					}
				} else {
					out.VoiceStates = (out.VoiceStates)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *VoiceState
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(VoiceState)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo15(in, v11)
					}
					out.VoiceStates = append(out.VoiceStates, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unavailable":
			out.Unavailable = bool(in.Bool())
		case "explicit_content_filter":
			out.ExplicitContentFilter = ExplicitContentFilterLevel(in.Int())
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]string, 0, 4)
					} else {
						out.Features = []string{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Features = append(out.Features, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mfa_level":
			out.MfaLevel = MfaLevel(in.Int())
		case "application_id":
			out.ApplicationID = int64(in.Int64Str())
		case "widget_enabled":
			out.WidgetEnabled = bool(in.Bool())
		case "widget_channel_id":
			out.WidgetChannelID = int64(in.Int64Str())
		case "system_channel_id":
			out.SystemChannelID = int64(in.Int64Str())
		case "system_channel_flags":
			out.SystemChannelFlags = SystemChannelFlag(in.Int())
		case "rules_channel_id":
			out.RulesChannelID = int64(in.Int64Str())
		case "vanity_url_code":
			out.VanityURLCode = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "banner":
			out.Banner = string(in.String())
		case "premium_tier":
			out.PremiumTier = PremiumTier(in.Int())
		case "premium_subscription_count":
			out.PremiumSubscriptionCount = int(in.Int())
		case "preferred_locale":
			out.PreferredLocale = string(in.String())
		case "public_updates_channel_id":
			out.PublicUpdatesChannelID = int64(in.Int64Str())
		case "max_video_channel_users":
			out.MaxVideoChannelUsers = int(in.Int())
		case "approximate_member_count":
			out.ApproximateMemberCount = int(in.Int())
		case "approximate_presence_count":
			out.ApproximatePresenceCount = int(in.Int())
		case "permissions":
			out.Permissions = int64(in.Int64Str())
		case "welcome_screen":
			if in.IsNull() {
				in.Skip()
				out.WelcomeScreen = nil
			} else {
				if out.WelcomeScreen == nil {
					out.WelcomeScreen = new(WelcomeScreen)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo16(in, out.WelcomeScreen)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo9(out *jwriter.Writer, in GuildCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"afk_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.AfkChannelID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.OwnerID))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.Bool(bool(in.Owner))
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"discovery_splash\":"
		out.RawString(prefix)
		out.String(string(in.DiscoverySplash))
	}
	{
		const prefix string = ",\"splash\":"
		out.RawString(prefix)
		out.String(string(in.Splash))
	}
	{
		const prefix string = ",\"afk_timeout\":"
		out.RawString(prefix)
		out.Int(int(in.AfkTimeout))
	}
	{
		const prefix string = ",\"member_count\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"verification_level\":"
		out.RawString(prefix)
		out.Int(int(in.VerificationLevel))
	}
	{
		const prefix string = ",\"large\":"
		out.RawString(prefix)
		out.Bool(bool(in.Large))
	}
	{
		const prefix string = ",\"default_message_notifications\":"
		out.RawString(prefix)
		out.Int(int(in.DefaultMessageNotifications))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Roles {
				if v13 > 0 {
					out.RawByte(',')
				}
				if v14 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo10(out, *v14)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"emojis\":"
		out.RawString(prefix)
		if in.Emojis == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Emojis {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo11(out, *v16)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Members {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo12(out, *v18)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"presences\":"
		out.RawString(prefix)
		if in.Presences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Presences {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo13(out, *v20)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"max_presences\":"
		out.RawString(prefix)
		out.Int(int(in.MaxPresences))
	}
	{
		const prefix string = ",\"max_members\":"
		out.RawString(prefix)
		out.Int(int(in.MaxMembers))
	}
	{
		const prefix string = ",\"channels\":"
		out.RawString(prefix)
		if in.Channels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Channels {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo14(out, *v22)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"voice_states\":"
		out.RawString(prefix)
		if in.VoiceStates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.VoiceStates {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo15(out, *v24)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"unavailable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Unavailable))
	}
	{
		const prefix string = ",\"explicit_content_filter\":"
		out.RawString(prefix)
		out.Int(int(in.ExplicitContentFilter))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Features {
				if v25 > 0 {
					out.RawByte(',')
				}
				out.String(string(v26))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"mfa_level\":"
		out.RawString(prefix)
		out.Int(int(in.MfaLevel))
	}
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ApplicationID))
	}
	{
		const prefix string = ",\"widget_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.WidgetEnabled))
	}
	{
		const prefix string = ",\"widget_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.WidgetChannelID))
	}
	{
		const prefix string = ",\"system_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.SystemChannelID))
	}
	{
		const prefix string = ",\"system_channel_flags\":"
		out.RawString(prefix)
		out.Int(int(in.SystemChannelFlags))
	}
	{
		const prefix string = ",\"rules_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.RulesChannelID))
	}
	{
		const prefix string = ",\"vanity_url_code\":"
		out.RawString(prefix)
		out.String(string(in.VanityURLCode))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"banner\":"
		out.RawString(prefix)
		out.String(string(in.Banner))
	}
	{
		const prefix string = ",\"premium_tier\":"
		out.RawString(prefix)
		out.Int(int(in.PremiumTier))
	}
	{
		const prefix string = ",\"premium_subscription_count\":"
		out.RawString(prefix)
		out.Int(int(in.PremiumSubscriptionCount))
	}
	{
		const prefix string = ",\"preferred_locale\":"
		out.RawString(prefix)
		out.String(string(in.PreferredLocale))
	}
	{
		const prefix string = ",\"public_updates_channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.PublicUpdatesChannelID))
	}
	{
		const prefix string = ",\"max_video_channel_users\":"
		out.RawString(prefix)
		out.Int(int(in.MaxVideoChannelUsers))
	}
	{
		const prefix string = ",\"approximate_member_count\":"
		out.RawString(prefix)
		out.Int(int(in.ApproximateMemberCount))
	}
	{
		const prefix string = ",\"approximate_presence_count\":"
		out.RawString(prefix)
		out.Int(int(in.ApproximatePresenceCount))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Permissions))
	}
	{
		const prefix string = ",\"welcome_screen\":"
		out.RawString(prefix)
		if in.WelcomeScreen == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo16(out, *in.WelcomeScreen)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildCreate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildCreate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo9(l, v)
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo16(in *jlexer.Lexer, out *WelcomeScreen) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "welcome_channels":
			if in.IsNull() {
				in.Skip()
				out.WelcomeChannels = nil
			} else {
				in.Delim('[')
				if out.WelcomeChannels == nil {
					if !in.IsDelim(']') {
						out.WelcomeChannels = make([]*WelcomeScreenChannels, 0, 8)
					} else {
						out.WelcomeChannels = []*WelcomeScreenChannels{}
					}
				} else {
					out.WelcomeChannels = (out.WelcomeChannels)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *WelcomeScreenChannels
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(WelcomeScreenChannels)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo17(in, v27)
					}
					out.WelcomeChannels = append(out.WelcomeChannels, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo16(out *jwriter.Writer, in WelcomeScreen) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		const prefix string = ",\"description\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"welcome_channels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.WelcomeChannels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v28, v29 := range in.WelcomeChannels {
				if v28 > 0 {
					out.RawByte(',')
				}
				if v29 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo17(out, *v29)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo17(in *jlexer.Lexer, out *WelcomeScreenChannels) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel_id":
			out.ID = int64(in.Int64())
		case "description":
			out.Description = string(in.String())
		case "emoji_id":
			out.EmojiID = int64(in.Int64())
		case "emoji_name":
			out.EmojiName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo17(out *jwriter.Writer, in WelcomeScreenChannels) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.EmojiID != 0 {
		const prefix string = ",\"emoji_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.EmojiID))
	}
	if in.EmojiName != "" {
		const prefix string = ",\"emoji_name\":"
		out.RawString(prefix)
		out.String(string(in.EmojiName))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo15(in *jlexer.Lexer, out *VoiceState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int64(in.Int64Str())
		case "session_id":
			out.SessionID = string(in.String())
		case "channel_id":
			out.ChannelID = int64(in.Int64Str())
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "suppress":
			out.Suppress = bool(in.Bool())
		case "self_mute":
			out.SelfMute = bool(in.Bool())
		case "self_deaf":
			out.SelfDeaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "deaf":
			out.Deaf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo15(out *jwriter.Writer, in VoiceState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.UserID))
	}
	{
		const prefix string = ",\"session_id\":"
		out.RawString(prefix)
		out.String(string(in.SessionID))
	}
	{
		const prefix string = ",\"channel_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ChannelID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"suppress\":"
		out.RawString(prefix)
		out.Bool(bool(in.Suppress))
	}
	{
		const prefix string = ",\"self_mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.SelfMute))
	}
	{
		const prefix string = ",\"self_deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.SelfDeaf))
	}
	{
		const prefix string = ",\"mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mute))
	}
	{
		const prefix string = ",\"deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deaf))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo14(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "type":
			out.Type = ChannelType(in.Int())
		case "last_message_id":
			out.LastMessageID = int64(in.Int64Str())
		case "last_pin_timestamp":
			out.LastPinTimestamp = Timestamp(in.String())
		case "nsfw":
			out.NSFW = bool(in.Bool())
		case "icon":
			out.Icon = string(in.String())
		case "position":
			out.Position = int(in.Int())
		case "bitrate":
			out.Bitrate = int(in.Int())
		case "recipients":
			if in.IsNull() {
				in.Skip()
				out.Recipients = nil
			} else {
				in.Delim('[')
				if out.Recipients == nil {
					if !in.IsDelim(']') {
						out.Recipients = make([]*User, 0, 8)
					} else {
						out.Recipients = []*User{}
					}
				} else {
					out.Recipients = (out.Recipients)[:0]
				}
				for !in.IsDelim(']') {
					var v30 *User
					if in.IsNull() {
						in.Skip()
						v30 = nil
					} else {
						if v30 == nil {
							v30 = new(User)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in, v30)
					}
					out.Recipients = append(out.Recipients, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "permission_overwrites":
			if in.IsNull() {
				in.Skip()
				out.PermissionOverwrites = nil
			} else {
				in.Delim('[')
				if out.PermissionOverwrites == nil {
					if !in.IsDelim(']') {
						out.PermissionOverwrites = make([]*PermissionOverwrite, 0, 8)
					} else {
						out.PermissionOverwrites = []*PermissionOverwrite{}
					}
				} else {
					out.PermissionOverwrites = (out.PermissionOverwrites)[:0]
				}
				for !in.IsDelim(']') {
					var v31 *PermissionOverwrite
					if in.IsNull() {
						in.Skip()
						v31 = nil
					} else {
						if v31 == nil {
							v31 = new(PermissionOverwrite)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo18(in, v31)
					}
					out.PermissionOverwrites = append(out.PermissionOverwrites, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_limit":
			out.UserLimit = int(in.Int())
		case "parent_id":
			out.ParentID = int64(in.Int64Str())
		case "rate_limit_per_user":
			out.RateLimitPerUser = int(in.Int())
		case "owner_id":
			out.OwnerID = int64(in.Int64())
		case "application_id":
			out.ApplicationID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo14(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"last_message_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.LastMessageID))
	}
	{
		const prefix string = ",\"last_pin_timestamp\":"
		out.RawString(prefix)
		out.String(string(in.LastPinTimestamp))
	}
	{
		const prefix string = ",\"nsfw\":"
		out.RawString(prefix)
		out.Bool(bool(in.NSFW))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"bitrate\":"
		out.RawString(prefix)
		out.Int(int(in.Bitrate))
	}
	{
		const prefix string = ",\"recipients\":"
		out.RawString(prefix)
		if in.Recipients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Recipients {
				if v32 > 0 {
					out.RawByte(',')
				}
				if v33 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out, *v33)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"permission_overwrites\":"
		out.RawString(prefix)
		if in.PermissionOverwrites == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.PermissionOverwrites {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo18(out, *v35)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_limit\":"
		out.RawString(prefix)
		out.Int(int(in.UserLimit))
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ParentID))
	}
	{
		const prefix string = ",\"rate_limit_per_user\":"
		out.RawString(prefix)
		out.Int(int(in.RateLimitPerUser))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.OwnerID))
	}
	{
		const prefix string = ",\"application_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ApplicationID))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo18(in *jlexer.Lexer, out *PermissionOverwrite) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "type":
			out.Type = PermissionOverwriteType(in.Int())
		case "deny":
			out.Deny = int64(in.Int64Str())
		case "allow":
			out.Allow = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo18(out *jwriter.Writer, in PermissionOverwrite) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"deny\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Deny))
	}
	{
		const prefix string = ",\"allow\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Allow))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo13(in *jlexer.Lexer, out *Presence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in, out.User)
			}
		case "status":
			out.Status = Status(in.String())
		case "activities":
			if in.IsNull() {
				in.Skip()
				out.Activities = nil
			} else {
				in.Delim('[')
				if out.Activities == nil {
					if !in.IsDelim(']') {
						out.Activities = make([]*Activity, 0, 8)
					} else {
						out.Activities = []*Activity{}
					}
				} else {
					out.Activities = (out.Activities)[:0]
				}
				for !in.IsDelim(']') {
					var v36 *Activity
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(Activity)
						}
						easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo2(in, v36)
					}
					out.Activities = append(out.Activities, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "since":
			if in.IsNull() {
				in.Skip()
				out.Since = nil
			} else {
				if out.Since == nil {
					out.Since = new(int)
				}
				*out.Since = int(in.Int())
			}
		case "client_status":
			easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo3(in, &out.ClientStatus)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo13(out *jwriter.Writer, in Presence) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"activities\":"
		out.RawString(prefix)
		if in.Activities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range in.Activities {
				if v37 > 0 {
					out.RawByte(',')
				}
				if v38 == nil {
					out.RawString("null")
				} else {
					easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo2(out, *v38)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"since\":"
		out.RawString(prefix)
		if in.Since == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Since))
		}
	}
	{
		const prefix string = ",\"client_status\":"
		out.RawString(prefix)
		easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo3(out, in.ClientStatus)
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo12(in *jlexer.Lexer, out *Member) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild_id":
			out.GuildID = int64(in.Int64Str())
		case "joined_at":
			out.JoinedAt = Timestamp(in.String())
		case "nick":
			out.Nick = string(in.String())
		case "deaf":
			out.Deaf = bool(in.Bool())
		case "mute":
			out.Mute = bool(in.Bool())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in, out.User)
			}
		case "roles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Roles).UnmarshalJSON(data))
			}
		case "premium_since":
			out.PremiumSince = Timestamp(in.String())
		case "pending":
			out.Pending = bool(in.Bool())
		case "permissions":
			out.Permissions = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo12(out *jwriter.Writer, in Member) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guild_id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.GuildID))
	}
	{
		const prefix string = ",\"joined_at\":"
		out.RawString(prefix)
		out.String(string(in.JoinedAt))
	}
	{
		const prefix string = ",\"nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"deaf\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deaf))
	}
	{
		const prefix string = ",\"mute\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mute))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		out.Raw((in.Roles).MarshalJSON())
	}
	{
		const prefix string = ",\"premium_since\":"
		out.RawString(prefix)
		out.String(string(in.PremiumSince))
	}
	{
		const prefix string = ",\"pending\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pending))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Permissions))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo11(in *jlexer.Lexer, out *Emoji) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "roles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Roles).UnmarshalJSON(data))
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo1(in, out.User)
			}
		case "managed":
			out.Managed = bool(in.Bool())
		case "require_colons":
			out.RequireColons = bool(in.Bool())
		case "animated":
			out.Animated = bool(in.Bool())
		case "available":
			out.Available = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo11(out *jwriter.Writer, in Emoji) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		out.Raw((in.Roles).MarshalJSON())
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"require_colons\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireColons))
	}
	{
		const prefix string = ",\"animated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Animated))
	}
	{
		const prefix string = ",\"available\":"
		out.RawString(prefix)
		out.Bool(bool(in.Available))
	}
	out.RawByte('}')
}
func easyjson692db02bDecodeGithubComPedroPessoaTidbotPkgsDiscordgo10(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64Str())
		case "name":
			out.Name = string(in.String())
		case "managed":
			out.Managed = bool(in.Bool())
		case "mentionable":
			out.Mentionable = bool(in.Bool())
		case "hoist":
			out.Hoist = bool(in.Bool())
		case "color":
			out.Color = int(in.Int())
		case "position":
			out.Position = int(in.Int())
		case "permissions":
			out.Permissions = int64(in.Int64Str())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComPedroPessoaTidbotPkgsDiscordgo10(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64Str(int64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"managed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Managed))
	}
	{
		const prefix string = ",\"mentionable\":"
		out.RawString(prefix)
		out.Bool(bool(in.Mentionable))
	}
	{
		const prefix string = ",\"hoist\":"
		out.RawString(prefix)
		out.Bool(bool(in.Hoist))
	}
	{
		const prefix string = ",\"color\":"
		out.RawString(prefix)
		out.Int(int(in.Color))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.Int(int(in.Position))
	}
	{
		const prefix string = ",\"permissions\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Permissions))
	}
	out.RawByte('}')
}
