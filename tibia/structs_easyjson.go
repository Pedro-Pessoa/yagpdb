// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tibia

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia(in *jlexer.Lexer, out *WorldInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "players_online":
			out.PlayersOnline = int(in.Int())
		case "online_record":
			(out.OnlineRecord).UnmarshalEasyJSON(in)
		case "creation_date":
			out.CreationDate = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "pvp_type":
			out.PvpType = string(in.String())
		case "world_quest_titles":
			if in.IsNull() {
				in.Skip()
				out.WorldQuestTitles = nil
			} else {
				in.Delim('[')
				if out.WorldQuestTitles == nil {
					if !in.IsDelim(']') {
						out.WorldQuestTitles = make([]string, 0, 4)
					} else {
						out.WorldQuestTitles = []string{}
					}
				} else {
					out.WorldQuestTitles = (out.WorldQuestTitles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.WorldQuestTitles = append(out.WorldQuestTitles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battleye_status":
			out.BattleyeStatus = string(in.String())
		case "Game World Type:":
			out.GameWorldType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia(out *jwriter.Writer, in WorldInformation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"players_online\":"
		out.RawString(prefix)
		out.Int(int(in.PlayersOnline))
	}
	{
		const prefix string = ",\"online_record\":"
		out.RawString(prefix)
		(in.OnlineRecord).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"creation_date\":"
		out.RawString(prefix)
		out.String(string(in.CreationDate))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"pvp_type\":"
		out.RawString(prefix)
		out.String(string(in.PvpType))
	}
	{
		const prefix string = ",\"world_quest_titles\":"
		out.RawString(prefix)
		if in.WorldQuestTitles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.WorldQuestTitles {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"battleye_status\":"
		out.RawString(prefix)
		out.String(string(in.BattleyeStatus))
	}
	{
		const prefix string = ",\"Game World Type:\":"
		out.RawString(prefix)
		out.String(string(in.GameWorldType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorldInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorldInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorldInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorldInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia1(in *jlexer.Lexer, out *World) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "world_information":
			(out.WorldInformation).UnmarshalEasyJSON(in)
		case "players_online":
			if in.IsNull() {
				in.Skip()
				out.PlayersOnline = nil
			} else {
				in.Delim('[')
				if out.PlayersOnline == nil {
					if !in.IsDelim(']') {
						out.PlayersOnline = make([]PlayersOnline, 0, 1)
					} else {
						out.PlayersOnline = []PlayersOnline{}
					}
				} else {
					out.PlayersOnline = (out.PlayersOnline)[:0]
				}
				for !in.IsDelim(']') {
					var v4 PlayersOnline
					(v4).UnmarshalEasyJSON(in)
					out.PlayersOnline = append(out.PlayersOnline, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia1(out *jwriter.Writer, in World) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"world_information\":"
		out.RawString(prefix[1:])
		(in.WorldInformation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"players_online\":"
		out.RawString(prefix)
		if in.PlayersOnline == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.PlayersOnline {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v World) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v World) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *World) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *World) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia1(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia2(in *jlexer.Lexer, out *TibiaWorld) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "world":
			(out.World).UnmarshalEasyJSON(in)
		case "information":
			(out.Information).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia2(out *jwriter.Writer, in TibiaWorld) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix[1:])
		(in.World).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"information\":"
		out.RawString(prefix)
		(in.Information).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TibiaWorld) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TibiaWorld) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TibiaWorld) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TibiaWorld) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia2(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia3(in *jlexer.Lexer, out *TibiaSpecificNews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "news":
			(out.News).UnmarshalEasyJSON(in)
		case "information":
			(out.Information).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia3(out *jwriter.Writer, in TibiaSpecificNews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"news\":"
		out.RawString(prefix[1:])
		(in.News).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"information\":"
		out.RawString(prefix)
		(in.Information).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TibiaSpecificNews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TibiaSpecificNews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TibiaSpecificNews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TibiaSpecificNews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia3(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia4(in *jlexer.Lexer, out *TibiaNews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "newslist":
			(out.Newslist).UnmarshalEasyJSON(in)
		case "information":
			(out.Information).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia4(out *jwriter.Writer, in TibiaNews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"newslist\":"
		out.RawString(prefix[1:])
		(in.Newslist).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"information\":"
		out.RawString(prefix)
		(in.Information).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TibiaNews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TibiaNews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TibiaNews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TibiaNews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia4(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia5(in *jlexer.Lexer, out *TibiaCharacters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "achievements":
			if in.IsNull() {
				in.Skip()
				out.Achievements = nil
			} else {
				in.Delim('[')
				if out.Achievements == nil {
					if !in.IsDelim(']') {
						out.Achievements = make([]CharAchievements, 0, 2)
					} else {
						out.Achievements = []CharAchievements{}
					}
				} else {
					out.Achievements = (out.Achievements)[:0]
				}
				for !in.IsDelim(']') {
					var v7 CharAchievements
					(v7).UnmarshalEasyJSON(in)
					out.Achievements = append(out.Achievements, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deaths":
			if in.IsNull() {
				in.Skip()
				out.Deaths = nil
			} else {
				in.Delim('[')
				if out.Deaths == nil {
					if !in.IsDelim(']') {
						out.Deaths = make([]CharDeaths, 0, 0)
					} else {
						out.Deaths = []CharDeaths{}
					}
				} else {
					out.Deaths = (out.Deaths)[:0]
				}
				for !in.IsDelim(']') {
					var v8 CharDeaths
					(v8).UnmarshalEasyJSON(in)
					out.Deaths = append(out.Deaths, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "account_information":
			(out.AccountInformation).UnmarshalEasyJSON(in)
		case "other_characters":
			if in.IsNull() {
				in.Skip()
				out.OtherCharacters = nil
			} else {
				in.Delim('[')
				if out.OtherCharacters == nil {
					if !in.IsDelim(']') {
						out.OtherCharacters = make([]OtherChars, 0, 1)
					} else {
						out.OtherCharacters = []OtherChars{}
					}
				} else {
					out.OtherCharacters = (out.OtherCharacters)[:0]
				}
				for !in.IsDelim(']') {
					var v9 OtherChars
					(v9).UnmarshalEasyJSON(in)
					out.OtherCharacters = append(out.OtherCharacters, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia5(out *jwriter.Writer, in TibiaCharacters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"achievements\":"
		out.RawString(prefix)
		if in.Achievements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Achievements {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"deaths\":"
		out.RawString(prefix)
		if in.Deaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Deaths {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"account_information\":"
		out.RawString(prefix)
		(in.AccountInformation).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"other_characters\":"
		out.RawString(prefix)
		if in.OtherCharacters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.OtherCharacters {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TibiaCharacters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TibiaCharacters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TibiaCharacters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TibiaCharacters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia5(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia6(in *jlexer.Lexer, out *Tibia) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "characters":
			(out.Characters).UnmarshalEasyJSON(in)
		case "information":
			(out.Information).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia6(out *jwriter.Writer, in Tibia) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"characters\":"
		out.RawString(prefix[1:])
		(in.Characters).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"information\":"
		out.RawString(prefix)
		(in.Information).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tibia) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tibia) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tibia) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tibia) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia6(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia7(in *jlexer.Lexer, out *SpecificGuild) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guild":
			(out.Guild).UnmarshalEasyJSON(in)
		case "information":
			(out.Information).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia7(out *jwriter.Writer, in SpecificGuild) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"guild\":"
		out.RawString(prefix[1:])
		(in.Guild).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"information\":"
		out.RawString(prefix)
		(in.Information).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SpecificGuild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SpecificGuild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SpecificGuild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SpecificGuild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia7(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia8(in *jlexer.Lexer, out *PlayersOnline) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "level":
			out.Level = int(in.Int())
		case "vocation":
			out.Vocation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia8(out *jwriter.Writer, in PlayersOnline) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlayersOnline) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlayersOnline) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlayersOnline) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlayersOnline) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia8(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia9(in *jlexer.Lexer, out *OtherChars) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "world":
			out.World = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia9(out *jwriter.Writer, in OtherChars) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherChars) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherChars) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherChars) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherChars) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia9(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia10(in *jlexer.Lexer, out *OnlineRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "players":
			out.Players = int(in.Int())
		case "date":
			(out.Date).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia10(out *jwriter.Writer, in OnlineRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"players\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Players))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		(in.Date).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnlineRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnlineRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnlineRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnlineRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia10(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia11(in *jlexer.Lexer, out *OnlineChar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Level":
			out.Level = int(in.Int())
		case "Vocation":
			out.Vocation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia11(out *jwriter.Writer, in OnlineChar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"Vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OnlineChar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OnlineChar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OnlineChar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OnlineChar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia11(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia12(in *jlexer.Lexer, out *Newslist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]NewsData, 0, 0)
					} else {
						out.Data = []NewsData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v16 NewsData
					(v16).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia12(out *jwriter.Writer, in Newslist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Data {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Newslist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Newslist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Newslist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Newslist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia12(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia13(in *jlexer.Lexer, out *NewsData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "news":
			out.News = string(in.String())
		case "apiurl":
			out.Apiurl = string(in.String())
		case "tibiaurl":
			out.Tibiaurl = string(in.String())
		case "date":
			(out.Date).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia13(out *jwriter.Writer, in NewsData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"news\":"
		out.RawString(prefix)
		out.String(string(in.News))
	}
	{
		const prefix string = ",\"apiurl\":"
		out.RawString(prefix)
		out.String(string(in.Apiurl))
	}
	{
		const prefix string = ",\"tibiaurl\":"
		out.RawString(prefix)
		out.String(string(in.Tibiaurl))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		(in.Date).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewsData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewsData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewsData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewsData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia13(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia14(in *jlexer.Lexer, out *News) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "content":
			out.Content = string(in.String())
		case "date":
			(out.Date).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia14(out *jwriter.Writer, in News) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		(in.Date).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v News) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v News) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *News) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *News) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia14(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia15(in *jlexer.Lexer, out *InternalNews) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ShortDescription":
			out.ShortDescription = string(in.String())
		case "URL":
			out.URL = string(in.String())
		case "Date":
			out.Date = string(in.String())
		case "ID":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia15(out *jwriter.Writer, in InternalNews) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"ShortDescription\":"
		out.RawString(prefix)
		out.String(string(in.ShortDescription))
	}
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"ID\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InternalNews) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InternalNews) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InternalNews) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InternalNews) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia15(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia16(in *jlexer.Lexer, out *InternalGuild) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "MemberCount":
			out.MemberCount = int(in.Int())
		case "World":
			out.World = string(in.String())
		case "GuildHall":
			out.GuildHall = string(in.String())
		case "War":
			out.War = string(in.String())
		case "Members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]GuildMember, 0, 0)
					} else {
						out.Members = []GuildMember{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v19 GuildMember
					(v19).UnmarshalEasyJSON(in)
					out.Members = append(out.Members, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia16(out *jwriter.Writer, in InternalGuild) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"MemberCount\":"
		out.RawString(prefix)
		out.Int(int(in.MemberCount))
	}
	{
		const prefix string = ",\"World\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"GuildHall\":"
		out.RawString(prefix)
		out.String(string(in.GuildHall))
	}
	{
		const prefix string = ",\"War\":"
		out.RawString(prefix)
		out.String(string(in.War))
	}
	{
		const prefix string = ",\"Members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Members {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InternalGuild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InternalGuild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InternalGuild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InternalGuild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia16(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia17(in *jlexer.Lexer, out *InternalDeaths) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Level":
			out.Level = int(in.Int())
		case "Reason":
			out.Reason = string(in.String())
		case "Date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia17(out *jwriter.Writer, in InternalDeaths) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"Reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"Date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InternalDeaths) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InternalDeaths) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InternalDeaths) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InternalDeaths) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia17(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia18(in *jlexer.Lexer, out *InternalChar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Level":
			out.Level = int(in.Int())
		case "World":
			out.World = string(in.String())
		case "Vocation":
			out.Vocation = string(in.String())
		case "Residence":
			out.Residence = string(in.String())
		case "AccountStatus":
			out.AccountStatus = string(in.String())
		case "Status":
			out.Status = string(in.String())
		case "Loyalty":
			out.Loyalty = string(in.String())
		case "AchievementPoints":
			out.AchievementPoints = int(in.Int())
		case "Sex":
			out.Sex = string(in.String())
		case "Married":
			out.Married = string(in.String())
		case "Guild":
			out.Guild = string(in.String())
		case "Rank":
			out.Rank = string(in.String())
		case "Comment":
			out.Comment = string(in.String())
		case "CreatedAt":
			out.CreatedAt = string(in.String())
		case "House":
			out.House = string(in.String())
		case "Deaths":
			if in.IsNull() {
				in.Skip()
				out.Deaths = nil
			} else {
				in.Delim('[')
				if out.Deaths == nil {
					if !in.IsDelim(']') {
						out.Deaths = make([]InternalDeaths, 0, 1)
					} else {
						out.Deaths = []InternalDeaths{}
					}
				} else {
					out.Deaths = (out.Deaths)[:0]
				}
				for !in.IsDelim(']') {
					var v22 InternalDeaths
					(v22).UnmarshalEasyJSON(in)
					out.Deaths = append(out.Deaths, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia18(out *jwriter.Writer, in InternalChar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"World\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"Vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	{
		const prefix string = ",\"Residence\":"
		out.RawString(prefix)
		out.String(string(in.Residence))
	}
	{
		const prefix string = ",\"AccountStatus\":"
		out.RawString(prefix)
		out.String(string(in.AccountStatus))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"Loyalty\":"
		out.RawString(prefix)
		out.String(string(in.Loyalty))
	}
	{
		const prefix string = ",\"AchievementPoints\":"
		out.RawString(prefix)
		out.Int(int(in.AchievementPoints))
	}
	{
		const prefix string = ",\"Sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"Married\":"
		out.RawString(prefix)
		out.String(string(in.Married))
	}
	{
		const prefix string = ",\"Guild\":"
		out.RawString(prefix)
		out.String(string(in.Guild))
	}
	{
		const prefix string = ",\"Rank\":"
		out.RawString(prefix)
		out.String(string(in.Rank))
	}
	{
		const prefix string = ",\"Comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"CreatedAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"House\":"
		out.RawString(prefix)
		out.String(string(in.House))
	}
	{
		const prefix string = ",\"Deaths\":"
		out.RawString(prefix)
		if in.Deaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Deaths {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InternalChar) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InternalChar) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InternalChar) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InternalChar) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia18(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia19(in *jlexer.Lexer, out *GuildMembers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rank_title":
			out.RankTitle = string(in.String())
		case "characters":
			if in.IsNull() {
				in.Skip()
				out.Characters = nil
			} else {
				in.Delim('[')
				if out.Characters == nil {
					if !in.IsDelim(']') {
						out.Characters = make([]GuildMemberCharacters, 0, 0)
					} else {
						out.Characters = []GuildMemberCharacters{}
					}
				} else {
					out.Characters = (out.Characters)[:0]
				}
				for !in.IsDelim(']') {
					var v25 GuildMemberCharacters
					(v25).UnmarshalEasyJSON(in)
					out.Characters = append(out.Characters, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia19(out *jwriter.Writer, in GuildMembers) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rank_title\":"
		out.RawString(prefix[1:])
		out.String(string(in.RankTitle))
	}
	{
		const prefix string = ",\"characters\":"
		out.RawString(prefix)
		if in.Characters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Characters {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildMembers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildMembers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildMembers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildMembers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia19(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia20(in *jlexer.Lexer, out *GuildMemberCharacters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "nick":
			out.Nick = string(in.String())
		case "level":
			out.Level = int(in.Int())
		case "vocation":
			out.Vocation = string(in.String())
		case "joined":
			out.Joined = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia20(out *jwriter.Writer, in GuildMemberCharacters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	{
		const prefix string = ",\"joined\":"
		out.RawString(prefix)
		out.String(string(in.Joined))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildMemberCharacters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildMemberCharacters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildMemberCharacters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildMemberCharacters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia20(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia21(in *jlexer.Lexer, out *GuildMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Nick":
			out.Nick = string(in.String())
		case "Level":
			out.Level = int(in.Int())
		case "Vocation":
			out.Vocation = string(in.String())
		case "Status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia21(out *jwriter.Writer, in GuildMember) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Nick\":"
		out.RawString(prefix)
		out.String(string(in.Nick))
	}
	{
		const prefix string = ",\"Level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"Vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia21(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia22(in *jlexer.Lexer, out *GuildInvited) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "invited":
			out.Invited = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia22(out *jwriter.Writer, in GuildInvited) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"invited\":"
		out.RawString(prefix)
		out.String(string(in.Invited))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildInvited) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildInvited) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildInvited) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildInvited) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia22(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia23(in *jlexer.Lexer, out *GuildHouse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	if !in.IsDelim('{') {
		in.Skip()
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "town":
			out.Town = string(in.String())
		case "paid":
			out.Paid = string(in.String())
		case "world":
			out.World = string(in.String())
		case "houseid":
			out.Houseid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia23(out *jwriter.Writer, in GuildHouse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"town\":"
		out.RawString(prefix)
		out.String(string(in.Town))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.String(string(in.Paid))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"houseid\":"
		out.RawString(prefix)
		out.Int(int(in.Houseid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildHouse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildHouse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildHouse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildHouse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia23(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia24(in *jlexer.Lexer, out *GuildData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "guildhall":
			(out.Guildhall).UnmarshalEasyJSON(in)
		case "application":
			out.Application = bool(in.Bool())
		case "war":
			out.War = bool(in.Bool())
		case "online_status":
			out.OnlineStatus = int(in.Int())
		case "offline_status":
			out.OfflineStatus = int(in.Int())
		case "disbanded":
			(out.Disbanded).UnmarshalEasyJSON(in)
		case "totalmembers":
			out.Totalmembers = int(in.Int())
		case "totalinvited":
			out.Totalinvited = int(in.Int())
		case "world":
			out.World = string(in.String())
		case "founded":
			out.Founded = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		case "guildlogo":
			out.Guildlogo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia24(out *jwriter.Writer, in GuildData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"guildhall\":"
		out.RawString(prefix)
		(in.Guildhall).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"application\":"
		out.RawString(prefix)
		out.Bool(bool(in.Application))
	}
	{
		const prefix string = ",\"war\":"
		out.RawString(prefix)
		out.Bool(bool(in.War))
	}
	{
		const prefix string = ",\"online_status\":"
		out.RawString(prefix)
		out.Int(int(in.OnlineStatus))
	}
	{
		const prefix string = ",\"offline_status\":"
		out.RawString(prefix)
		out.Int(int(in.OfflineStatus))
	}
	{
		const prefix string = ",\"disbanded\":"
		out.RawString(prefix)
		(in.Disbanded).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"totalmembers\":"
		out.RawString(prefix)
		out.Int(int(in.Totalmembers))
	}
	{
		const prefix string = ",\"totalinvited\":"
		out.RawString(prefix)
		out.Int(int(in.Totalinvited))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"founded\":"
		out.RawString(prefix)
		out.String(string(in.Founded))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	{
		const prefix string = ",\"guildlogo\":"
		out.RawString(prefix)
		out.String(string(in.Guildlogo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GuildData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GuildData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GuildData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GuildData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia24(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia25(in *jlexer.Lexer, out *Guild) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "members":
			if in.IsNull() {
				in.Skip()
				out.Members = nil
			} else {
				in.Delim('[')
				if out.Members == nil {
					if !in.IsDelim(']') {
						out.Members = make([]GuildMembers, 0, 1)
					} else {
						out.Members = []GuildMembers{}
					}
				} else {
					out.Members = (out.Members)[:0]
				}
				for !in.IsDelim(']') {
					var v28 GuildMembers
					(v28).UnmarshalEasyJSON(in)
					out.Members = append(out.Members, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "invited":
			if in.IsNull() {
				in.Skip()
				out.Invited = nil
			} else {
				in.Delim('[')
				if out.Invited == nil {
					if !in.IsDelim(']') {
						out.Invited = make([]GuildInvited, 0, 2)
					} else {
						out.Invited = []GuildInvited{}
					}
				} else {
					out.Invited = (out.Invited)[:0]
				}
				for !in.IsDelim(']') {
					var v29 GuildInvited
					(v29).UnmarshalEasyJSON(in)
					out.Invited = append(out.Invited, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia25(out *jwriter.Writer, in Guild) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"members\":"
		out.RawString(prefix)
		if in.Members == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Members {
				if v30 > 0 {
					out.RawByte(',')
				}
				(v31).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"invited\":"
		out.RawString(prefix)
		if in.Invited == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Invited {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Guild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Guild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Guild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Guild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia25(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia26(in *jlexer.Lexer, out *Finalizada) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	if !in.IsDelim('{') {
		in.Skip()
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notification":
			out.Notification = string(in.String())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia26(out *jwriter.Writer, in Finalizada) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notification\":"
		out.RawString(prefix[1:])
		out.String(string(in.Notification))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Finalizada) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Finalizada) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Finalizada) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Finalizada) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia26(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia27(in *jlexer.Lexer, out *DeathInvolved) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia27(out *jwriter.Writer, in DeathInvolved) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeathInvolved) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeathInvolved) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeathInvolved) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeathInvolved) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia27(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia28(in *jlexer.Lexer, out *Date) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "timezone_type":
			out.TimezoneType = int(in.Int())
		case "timezone":
			out.Timezone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia28(out *jwriter.Writer, in Date) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"timezone_type\":"
		out.RawString(prefix)
		out.Int(int(in.TimezoneType))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Date) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Date) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Date) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Date) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia28(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia29(in *jlexer.Lexer, out *CharLastLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "timezone_type":
			out.TimezoneType = int(in.Int())
		case "timezone":
			out.Timezone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia29(out *jwriter.Writer, in CharLastLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"timezone_type\":"
		out.RawString(prefix)
		out.Int(int(in.TimezoneType))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharLastLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharLastLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharLastLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharLastLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia29(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia30(in *jlexer.Lexer, out *CharHouse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "town":
			out.Town = string(in.String())
		case "paid":
			out.Paid = string(in.String())
		case "world":
			out.World = string(in.String())
		case "houseid":
			out.Houseid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia30(out *jwriter.Writer, in CharHouse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"town\":"
		out.RawString(prefix)
		out.String(string(in.Town))
	}
	{
		const prefix string = ",\"paid\":"
		out.RawString(prefix)
		out.String(string(in.Paid))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"houseid\":"
		out.RawString(prefix)
		out.Int(int(in.Houseid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharHouse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharHouse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharHouse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharHouse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia30(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia31(in *jlexer.Lexer, out *CharGuild) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "rank":
			out.Rank = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia31(out *jwriter.Writer, in CharGuild) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.String(string(in.Rank))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharGuild) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharGuild) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharGuild) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharGuild) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia31(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia32(in *jlexer.Lexer, out *CharDeaths) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			(out.Date).UnmarshalEasyJSON(in)
		case "level":
			out.Level = int(in.Int())
		case "reason":
			out.Reason = string(in.String())
		case "involved":
			if in.IsNull() {
				in.Skip()
				out.Involved = nil
			} else {
				in.Delim('[')
				if out.Involved == nil {
					if !in.IsDelim(']') {
						out.Involved = make([]DeathInvolved, 0, 4)
					} else {
						out.Involved = []DeathInvolved{}
					}
				} else {
					out.Involved = (out.Involved)[:0]
				}
				for !in.IsDelim(']') {
					var v34 DeathInvolved
					(v34).UnmarshalEasyJSON(in)
					out.Involved = append(out.Involved, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia32(out *jwriter.Writer, in CharDeaths) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		(in.Date).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"involved\":"
		out.RawString(prefix)
		if in.Involved == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Involved {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharDeaths) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharDeaths) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharDeaths) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharDeaths) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia32(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia33(in *jlexer.Lexer, out *CharData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "former_names":
			if in.IsNull() {
				in.Skip()
				out.FormerNames = nil
			} else {
				in.Delim('[')
				if out.FormerNames == nil {
					if !in.IsDelim(']') {
						out.FormerNames = make([]string, 0, 4)
					} else {
						out.FormerNames = []string{}
					}
				} else {
					out.FormerNames = (out.FormerNames)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.FormerNames = append(out.FormerNames, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "vocation":
			out.Vocation = string(in.String())
		case "level":
			out.Level = int(in.Int())
		case "achievement_points":
			out.AchievementPoints = int(in.Int())
		case "world":
			out.World = string(in.String())
		case "former_world":
			out.FormerWorld = string(in.String())
		case "residence":
			out.Residence = string(in.String())
		case "married_to":
			out.MarriedTo = string(in.String())
		case "house":
			(out.House).UnmarshalEasyJSON(in)
		case "guild":
			(out.Guild).UnmarshalEasyJSON(in)
		case "last_login":
			if in.IsNull() {
				in.Skip()
				out.LastLogin = nil
			} else {
				in.Delim('[')
				if out.LastLogin == nil {
					if !in.IsDelim(']') {
						out.LastLogin = make([]CharLastLogin, 0, 1)
					} else {
						out.LastLogin = []CharLastLogin{}
					}
				} else {
					out.LastLogin = (out.LastLogin)[:0]
				}
				for !in.IsDelim(']') {
					var v38 CharLastLogin
					(v38).UnmarshalEasyJSON(in)
					out.LastLogin = append(out.LastLogin, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "comment":
			out.Comment = string(in.String())
		case "account_status":
			out.AccountStatus = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia33(out *jwriter.Writer, in CharData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"former_names\":"
		out.RawString(prefix)
		if in.FormerNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.FormerNames {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"vocation\":"
		out.RawString(prefix)
		out.String(string(in.Vocation))
	}
	{
		const prefix string = ",\"level\":"
		out.RawString(prefix)
		out.Int(int(in.Level))
	}
	{
		const prefix string = ",\"achievement_points\":"
		out.RawString(prefix)
		out.Int(int(in.AchievementPoints))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"former_world\":"
		out.RawString(prefix)
		out.String(string(in.FormerWorld))
	}
	{
		const prefix string = ",\"residence\":"
		out.RawString(prefix)
		out.String(string(in.Residence))
	}
	{
		const prefix string = ",\"married_to\":"
		out.RawString(prefix)
		out.String(string(in.MarriedTo))
	}
	{
		const prefix string = ",\"house\":"
		out.RawString(prefix)
		(in.House).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"guild\":"
		out.RawString(prefix)
		(in.Guild).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"last_login\":"
		out.RawString(prefix)
		if in.LastLogin == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.LastLogin {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"account_status\":"
		out.RawString(prefix)
		out.String(string(in.AccountStatus))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia33(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia34(in *jlexer.Lexer, out *CharAchievements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stars":
			out.Stars = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia34(out *jwriter.Writer, in CharAchievements) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stars\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Stars))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CharAchievements) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CharAchievements) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CharAchievements) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CharAchievements) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia34(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia35(in *jlexer.Lexer, out *ApiInformation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "api_version":
			out.APIVersion = int(in.Int())
		case "execution_time":
			out.ExecutionTime = float64(in.Float64())
		case "last_updated":
			out.LastUpdated = string(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia35(out *jwriter.Writer, in ApiInformation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"api_version\":"
		out.RawString(prefix[1:])
		out.Int(int(in.APIVersion))
	}
	{
		const prefix string = ",\"execution_time\":"
		out.RawString(prefix)
		out.Float64(float64(in.ExecutionTime))
	}
	{
		const prefix string = ",\"last_updated\":"
		out.RawString(prefix)
		out.String(string(in.LastUpdated))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.String(string(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiInformation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiInformation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiInformation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiInformation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia35(l, v)
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia36(in *jlexer.Lexer, out *ActInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	if !in.IsDelim('{') {
		in.Skip()
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "loyalty_title":
			out.LoyaltyTitle = string(in.String())
		case "created":
			(out.Created).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia36(out *jwriter.Writer, in ActInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"loyalty_title\":"
		out.RawString(prefix[1:])
		out.String(string(in.LoyaltyTitle))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		(in.Created).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia36(l, v)
	return
}
func easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia37(in *jlexer.Lexer, out *ActCreated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "date":
			out.Date = string(in.String())
		case "timezone_type":
			out.TimezoneType = int(in.Int())
		case "timezone":
			out.Timezone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia37(out *jwriter.Writer, in ActCreated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix[1:])
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"timezone_type\":"
		out.RawString(prefix)
		out.Int(int(in.TimezoneType))
	}
	{
		const prefix string = ",\"timezone\":"
		out.RawString(prefix)
		out.String(string(in.Timezone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ActCreated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ActCreated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComPedroPessoaTidbotTibia37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ActCreated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ActCreated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComPedroPessoaTidbotTibia37(l, v)
}
